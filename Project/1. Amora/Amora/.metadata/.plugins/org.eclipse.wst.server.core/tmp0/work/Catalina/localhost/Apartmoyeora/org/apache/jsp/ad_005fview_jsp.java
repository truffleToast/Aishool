/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-17 03:27:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model.AdDAO;
import model.AdDTO;
import model.UsersDTO;
import java.io.PrintWriter;

public final class ad_005fview_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("model.AdDAO");
    _jspx_imports_classes.add("model.UsersDTO");
    _jspx_imports_classes.add("model.AdDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href= \"css/bootstrap.css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>JSP 게시판 웹 사이트</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   ");
 
   
   
      UsersDTO info =(UsersDTO)session.getAttribute("info"); 
      String nickname = info.getNickname();
      
      int ad_Num = 0;
      
      if (request.getParameter("ad_Num") != null) {
    	  ad_Num = Integer.parseInt(request.getParameter("ad_Num")); // AD_NUM 게시글 번호 
         //SQL ROWNUM ORDER BY COM_DATE DESC;
         
         //SELECT COM_CATEGORY, COM_NUM, COM_TITLE, NICKNAME, COM_DATE, COM_VIEWS FROM COMMUNITY ORDER BY COM_NUM DESC;
         
      }
    /*   if (com_Num == 0) {
         PrintWriter script = response.getWriter();
         script.println("<script>");
         script.println("alert('유효하지 않는 글입니다.')");
         script.println("location.href = 'community.jsp'");
         script.println("history.back()");
         script.println("</script>");
      } */
      
      AdDTO dto = new AdDAO().getAdDTO(ad_Num);

      
   
      out.write("\r\n");
      out.write("   <nav class=\"navbar navbar-default\">\r\n");
      out.write("      <div class=\"navbar-header\">\r\n");
      out.write("         <button type=\"button\" class=\"navbar-toggle collapsed\"\r\n");
      out.write("            data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\"\r\n");
      out.write("            aria-expanded=\"false\">\r\n");
      out.write("            <span class=\"icon-bar\"></span>\r\n");
      out.write("            <span class=\"icon-bar\"></span>\r\n");
      out.write("            <span class=\"icon-bar\"></span>\r\n");
      out.write("         </button>\r\n");
      out.write("         <a class=\"navbar-brand\" href=\"community.jsp\">AMORA</a>\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("         <ul class=\"nav navbar-nav\">\r\n");
      out.write("            <li><a href=\"index.jsp\">메인</a></li>\r\n");
      out.write("            <li class=\"active\"><a href=\"promotion.jsp\">게시판</a></li>\r\n");
      out.write("         </ul>\r\n");
      out.write("         ");
 
            if (nickname == null) {
         
      out.write("\r\n");
      out.write("         <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("            <li class=\"dropdown\">\r\n");
      out.write("               <a href=\"#\" class=\"dropdown-toggle\"\r\n");
      out.write("                  data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\r\n");
      out.write("                  aria-expanded=\"false\">접속하기<span class=\"caret\"></span></a>\r\n");
      out.write("               <ul class=\"dropdown-menu\">\r\n");
      out.write("                  <li><a href=\"index.jsp\">로그인</a></li>\r\n");
      out.write("                  <li><a href=\"join.jsp\">회원가입</a></li>\r\n");
      out.write("               </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("         </ul>\r\n");
      out.write("         ");
       
            } else {
         
      out.write("\r\n");
      out.write("         <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("            <li class=\"dropdown\">\r\n");
      out.write("               <a href=\"#\" class=\"dropdown-toggle\"\r\n");
      out.write("                  data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\r\n");
      out.write("                  aria-expanded=\"false\">마이페이지<span class=\"caret\"></span></a>\r\n");
      out.write("               <ul class=\"dropdown-menu\">\r\n");
      out.write("                  <li><a href=\"logoutAction.jsp\">로그아웃</a></li>\r\n");
      out.write("               </ul>\r\n");
      out.write("            </li>\r\n");
      out.write("         </ul>\r\n");
      out.write("         ");
      
            }
         
      out.write("\r\n");
      out.write("         \r\n");
      out.write("      </div>\r\n");
      out.write("   </nav>\r\n");
      out.write("   <div class=\"container\">\r\n");
      out.write("      <div class=\"row\">\r\n");
      out.write("         <table class=\"table table-striped\" style=\"text-align: center; border: 1px solid #dddddd\">\r\n");
      out.write("            <thead>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <th colspan=\"3\" style=\"background-color: #eeeeee; text-align: center;\">게시판 글보기</th>                  \r\n");
      out.write("               </tr>\r\n");
      out.write("            </thead>\r\n");
      out.write("            <tbody>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td style=\"width: 20%;\">글제목</td>\r\n");
      out.write("                  <td colspan=\"2\">");
      out.print( dto.getAd_Title().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;").replaceAll(">","&gt;").replaceAll("\n", "<br>") );
      out.write("</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>작성자</td>\r\n");
      out.write("                  <td colspan=\"2\">");
      out.print( dto.getNickname() );
      out.write("</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>작성일자</td>\r\n");
      out.write("                  <td colspan=\"2\">");
      out.print( dto.getAd_Date().substring(0, 11) + dto.getAd_Date().substring(11, 13) + "시" + dto.getAd_Date().substring(14, 16) + "분 " );
      out.write("</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>작성자</td>\r\n");
      out.write("                  <td colspan=\"2\">");
      out.print( dto.getNickname() );
      out.write("</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               \r\n");
      out.write("               ");
      out.write("\r\n");
      out.write("               ");
      out.write("\r\n");
      out.write("				");

					AdDAO adDAO = new AdDAO();
					String imagePath = adDAO.ad_img(ad_Num);
												 
					if(imagePath == null){
					  imagePath = "/sh_img/빈사진.jpg";
					}
				
      out.write("\r\n");
      out.write("				\r\n");
      out.write("				");
      out.write("\r\n");
      out.write("			   <tr>\r\n");
      out.write("                  <td>사 진</td>\r\n");
      out.write("                  <td colspan=\"2\"><img class=\"card-img-top\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.print(imagePath);
      out.write("\"  alt=\"...\" /></td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               <tr>\r\n");
      out.write("                  <td>내용</td>\r\n");
      out.write("\r\n");
      out.write("                  <td colspan=\"2\" style=\"min-height: 200px; text-align: left;\">");
      out.print( dto.getAd_Content().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;").replaceAll(">","&gt;").replaceAll("\n", "<br>") );
      out.write("</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("               \r\n");
      out.write("               \r\n");
      out.write("            </tbody>\r\n");
      out.write("         </table>\r\n");
      out.write("         <a href=\"promotion.jsp\" class=\"btn btn-primary\">목록</a>\r\n");
      out.write("         ");

            if (nickname != null && nickname.equals(dto.getNickname())) {
         
      out.write("\r\n");
      out.write("               <a href=\"update.jsp?ad_Num=");
      out.print( ad_Num );
      out.write("\" class=\"btn btn-primary\">수정</a>\r\n");
      out.write("               <a onclick=\"return confirm('정말로 삭제하시겠습니까?')\" href=\"ad_deleteAction?ad_Num=");
      out.print( ad_Num );
      out.write("&ad_Title=");
      out.print( dto.getAd_Title() );
      out.write("\" class=\"btn btn-primary\">삭제</a>\r\n");
      out.write("               <!-- 삭제의 기준이 되는 com_Num과 com_Category의 값을 무조건 받아야함,그래서 전달도 같이 해줘야함. -->\r\n");
      out.write("\r\n");
      out.write("         ");

            }
         
      out.write("      \r\n");
      out.write("         \r\n");
      out.write("      </div>\r\n");
      out.write("   </div>\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("   <script src=\"js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
